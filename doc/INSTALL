# INSTALLATION INSTRUCTIONS
#
# This package is only available for linux\unix (it might work for mac too but I haven't tested it).
# 
# Make sure all the .py and .sh files in the src/ directory are executable:
#
# $ chmod u+x src/*.py
# $ chmod u+x src/*.sh
#
# You may also want to do this with all the sh scritps in the "scripts/" directory
# $ chmod u+x scripts/*.py
# $ chmod u+x scripts/*.sh
#
# Add the src/ directory to your path by adding the following two lines to your .bashrc file (~/.bashrc):
#
# export PATH=$PATH:${ROOTDIR}/src
# export PYTHONPATH=$PYTHONPATH:${ROOTDIR}/lib
#
# where ${ROOTDIR| is the location of the folder into which you cloned the git repository. You will then need to
# save the file and source it (only need to source it once - if you log out and back in the .bashrc file is run
# automatically):
#
# $ source ~/.bashrc
#
# The packages have a variety of dependencies depending on how you want to run them.
#
# The most essential ones are:
#
# NCBI BLAST: BlastP is used as a basis for generating gene clusters. BLASTN and TBLASTN are also used in various scripts.
# Ruffus: Python parallelization package. Used to parallelize BLAST and TBLASTN functions (the
#         parallelization option in NCBI BLast doesn't work on all machines).
# MCL: Clustering tool used to generate gene clusters.
# Sqlite3: Used to store and query blast, cluster and alignment\tree data.
# Python (I used 2.6): Most of the code is written for python. The rest is written for BASH 
#    but most of it will hopefully work with other shells.
#
# Other tools needed \ supported for certain functions:
#
# PYTHON PACKAGES
#
# BioPython: Used for reading and writing various alignment formats
# ETE and PyQT4 - Used for tree visualization.
# Numpy: Used for assorted calcualtions and organization
#
# ANALYSIS PACKAGES
#
# FastTree (http://www.microbesonline.org/fasttree/) - Fast treeing program, at the expense of some accuracy
# MyRAST (http://blog.theseed.org/downloads/sas.tgz) - has a lot of 
#   scripts for analyzing genomes present in the PubSEED / SEED viewer, 
#   including tools for analyzing trees and alignments, efficient calculation of representative genes, etc.
#   A list of easy-to-use functions is available here: http://pubseed.theseed.org/sapling/server.cgi?pod=ServerScripts
# MaFFT - Fast and (fairly) accurate multiple-alignment software
# RaxML - Accurate but slow treeing program.
#
# If you want to run OrthoMCL you need to install that and its dependencies, which include:
#  - MySQL
#  - Perl 5
#  - DBI and DBD::mysql , both of which can be installed (as root) by using CPAN if you don't have them
#  $ sudo cpan DBI
#  $ sudo cpan DBD::mysql
# See the orthoMCL help for more details.
# WARNING: the orthoMCL requires you to set the global variable local_infile to TRUE
#   or else mysql will refuse to load your BLAST file
#   (it will tell you "the used command is not allowed").
# You can set that by executing the command (as the mySQL root)
# SET GLOBAL local_infile=TRUE;
# or include it in the DBI string like in the sample.

### DATA SETUP ###
#
# To actually run the programs you need some data. I'll consider the directory created when
# you check this out of git the "root" ${ROOTDIR} directory.
#
# If you run the provided input setup scripts or download the genbank and "spreadsheet (text)" files
# from RAST, everything will automatically be returned to you with the required formatting conventions.
# This is only here to document what the requirements are and in case you want to write scripts to generate
# your own input files.
#
### 1: Genbank files (required) ###
# 
# You need a genbank file for every organism. The following information is taken from the genbank files at a minimum:
# - Organism (in the /organism="[organism name]" line )
# - Tax ID (in a /db_xref="Taxon:[taxid]" line )
#
# These should be present in all the genbank files from Genbank (ftp.ncbi.nih.gov/genomes/Bacteria). It is assumed that
# any duplicates of such lines are all identical.
#
# Additional requirements: 
# 1: You need ONE genbank file per organism. Concatinate the genbank files for all the contigs (after generating a raw file, if you need one)
# 2: The contig ID must not have any spaces in it.
#
### 2: raw files ###
#
# Raw files are tab-delimited files containing information needed for our analysis.
# They must be placed in the ${ROOTDIR}/raw folder.
#
# The columns of a raw file are as follows:
#
# contig_id       feature_id      type    location        start   stop    strand  function        aliases figfam  evidence_codes  nucleotide_sequence     aa_sequence
#
# The feature_id for any protein-encoding gene must have the format:
# fig|#.#.peg.# (e.g. fig|83333.1.peg.1)
#
# - The first two numbers (83333.1) must match the organism ID for the organism containing that gene.
# - The overall feature ID must be unique for each gene.
#
# Type should be "peg" for all proteins. Anything that is not a protein is ignored.
#
# Start/stop is the start/stop of the actual gene on the specified contig (start > stop for - strand genes).
# 
# - The start\stop are 1-indexed from the beginning of the contig on which the feature is found.
#
# Strand is + or -
#
# Function is the functional annotation.
#
# nucleotide_sequence is the nucleotide sequence encoding for the protein and aa_sequence is the translated amino acid sequence.
#
# All other fields (location, aliases, figfam, evidence_codes, ...) are ignored.
#
# There are a number of ways to make a raw file.
# Tested interfaces are available for hooking into:
#   - Genbank (method #2)
#   - The SEED (method #3)
#   - Microbes Online (method #3)
#
# Method #1: Upload your genomes to RAST (rast.nmpdr.org) for annotation and then download the tab-delimited file, which is in this format.
# Method #2: Given a set of genbank files (one per contig) with enough info to infer all the above information,
#   run [TODO: JAMES'S SCRIPT] to get it.
# Method #3: Run the convertKbaseToRast.sh script with a KBase ID as input.
#   For now The KBase ID must correspond to either a SEED genome
#   or a microbes online genome. Running this doesn't require MyRAST but does require access to a local install of the DOE KBase software
#   available at http://kbase.science.energy.gov/developer-zone/downloads/
#
### 3: organism file ###
#
# This is automatically generated from the genbank files, except for abbreviations which must be edited manually
# if you need them (the default is to just use DEFAULT_## where ## is an incremental number).
#
# The file is always in ${ROOTDIR} and has three columns: Organism name, abbreviation, and ID.
#
# Methanosarcina acetivorans C2A  aceC2A  188937.1
# Methanosarcina mazei GO1        mazGO1  192952.1
#
### 4: groups file ###
#
# This file comes automatically-generated with a default group containing all the organisms. You should
# add or remove additional groups according to the analyses you want to perform.
#
# This file allows you to specify multiple groups of organisms that you want to cluster with the same set of
# parameters. In it, the first column is a (unique but arbitrary) name of the organism group, and the second one
# contains a semicolon-delimited list of all of the strains you are analyzing. For example:
#
# Methanosarcina	Methanosarcina acetivorans C2A;Methanosarcina barkeri Fusaro; Methanosarcina mazei GO1
# mazei			Methanosarcina mazei Go1
#
# Use the addGroupByMatch.sh function to add groups to the groups file based on searches through the organism file,
# or make the lists manually. The run IDs will use the group names as their base (along with user-defined clustering parameters).
#
# FIXME: Need function to remove a group and all clustering results belonging to that group.