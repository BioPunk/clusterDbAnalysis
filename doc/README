-------------------------------

DESCRIPTION OF PIPELINE - PART 1 ("main.sh")

To run:

./main.sh

(must be run from the root directory of the repository)

This first part of the pipeline begins with the input files (see INSTALL) and ends with
some processed gene tables with easier access to gene lengths and organisms, and
all of the BLAST results and gene neighborhoods pre-computed for easy access.

The shell script "main.sh" pipes each of the raw data
into the functions that are necessary and outputs the results of these functions 
are redirected to the appropriate output folder.

Any of the python scripts can be run individually as well - many of them are pipe commands.
Unlike the main.sh and main2.sh the individual scripts can be run from anywhere.

The steps performed are as follows: 

- Generate (annotated) amino acid and nucleotide fasta files
- Generate an annotation file for matching up later, containing organism name, gene name,
  annotation and length of each gene in tab-delimited format
- Run BLAST all vs. all

- Generate a SQLITE database containing:
   rawdata: Concatenated list of all of the raw SEED data
   organisms: A list of organisms and associated SEED features
   processed: A view containing Organism name, gene name, gene length, and annotation.
   blastresults: The blast results [concatenated], in -m9 format (ready for input into MCL)
   neighborhoods: Gene neighborhoods of each gene - neighorhood calculation allows things on either strand
      to be considered a neighborhood and looks at number of genes, not genetic distance.

-------------------------------
-------------------------------

DESCRIPTION OF PIPELINE - PART 2 ("main2.sh")

To run: ONLY AFTER running main1.sh:

./main2.sh [Inflation] [Measurement_technique] [Cutoff]

For each line of the "groups" file:
- Use the database to generate a list of blast hits for only the organisms 
- Call MCL to generate clusters
- Generate raw and flattened results files. Give each cluster run an identifier that explains what parameters
  were passed into it (parameters include inflation, measurement technique, and cutoff)

Concatinate all of the flattened results files (with unique identifiers) and import them into the
  database as the "clusters" table. Also makes a couple other tables for convenience, including "clusterorgs" which
  lists the organisms in each cluster.

-------------------------------
-------------------------------

DESCRIPTION OF PIPELINE - PART 3 ("main3.sh")

To run: ONLY after running main1.sh:

./main3.sh

For each file in the "genbank" folder:
- Parse the genbank file to get the whole-genome nucleotide sequence (which must be present)
- Create a table linking organism ID to its genome
- Import the genomes into the database

Genbank filenames must contain the organism ID for the
organism in the file (since there isn't a consistent place to look for them
within the file itself). This step is not necessary to run clustering but is
necessary to run TBLASTN or analyze intergeneic regions.

#########################
# SQL building scripts
#########################

For reference, the SQL code used to build the local sqlite database
with information from other analysis functions is located in 
builddb_1.sql (blast, neighborhoods, and raw data), builddb_2.sql (clustering), 
and builddb_3.sql (genome contigs)

See "help_texts" for detailed descriptions of every python file and shell script
in the src/ folder of this distribution.

